<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>Youtube Synchro</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <script src="/socket.io/socket.io.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <style type="text/css">
      body {
        background-image: url("bgAsset 1.svg");
        /*background-color: #777;*/
       }
      #player-container {
        display: flex;
        justify-content: center;
        align-items: center;
        margin-top: 30px;
      }
      #player{
        /*margin-top: 20px;*/
        /*border: 1px solid rgb(255,20,20);*/
      }
      #btn-container{
        display: flex;
        justify-content: center;
        flex-wrap: wrap;
      }
      #play,#pause,#sync,#mute {
        padding: 1rem;
        background-color: #333;
        border: 1px solid #333;
        color: #fff;
        margin: 10px;
      }
      #play:hover,#pause:hover,#sync:hover,#mute:hover{
        background-color: rgb(255,20,20);
        border: 1px solid rgb(255,20,20);
        cursor: pointer;
      }
      #video,#timenew{
        padding: .5rem;
        border: 1px solid #555;
        background-color: #000;
        color: #fff;
      }
      #btn-vid,#btn-time{
        padding: 3px;
        border: 2px solid #333;
        background-color: #333;
        color: #fff;
      }
      #btn-vid:hover,#btn-time:hover{
        background-color: rgb(255,20,20);
        border: 2px solid rgb(255,20,20);
        cursor: pointer;
      }
      #form {
        display: flex;
        flex-wrap: nowrap;
        justify-content: center;
      }
      #time{
        display: flex;
        justify-content: center;
        margin: 20px;
      }
      #nav-bar {
        /*background: #333333;   fallback for old browsers */
        /*background: -webkit-linear-gradient(to left, #dd1818, #333333);  /* Chrome 10-25, Safari 5.1-6 */*/
        /*background: linear-gradient(to left, #dd1818, #333333);  W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+  */
        padding: 1rem;
      }
      h4{
        color: #eee;
        text-align: center;
      }
      .slidecontainer {
        display: flex;
        justify-content: center;
        /*width: 50%;*/
      }

      .slider {
        -webkit-appearance: none;
        width: 640px;
        height: 3px;
        background: #d3d3d3;
        color: #000;
        outline: none;
        opacity: 0.7;
        -webkit-transition: .2s;
        transition: opacity .2s;
      }

      .slider:hover {
        opacity: 1;
      }

      .slider::-webkit-slider-thumb {
        -webkit-appearance: none;
        appearance: none;
        width: 10px;
        height: 10px;
        color: #000;
        background: rgb(255,20,20);
        cursor: pointer;
      }
      .slider::-moz-range-thumb {
        width: 15px;
        height: 15px;
        background: rgb(255,20,20);
        cursor: pointer;
      }

      .hide-initially{
        display: none;
      }

      .center-initial-nav{
        position:fixed;
        top: 50%;
        left: 50%;
        width:30em;
        height:18em;
        margin-top: -9em; /*set to a negative number 1/2 of your height*/
        margin-left: -15em; /*set to a negative number 1/2 of your width*/
      }
    </style>
</head>
<body>

  <nav id="nav-bar" class="center-initial-nav">
    <h4 style="color: #fff;text-align: center;">YouTube Synchro</h4>
    <form id='form'>
      <input placeholder="Enter Video Id" id="video">
      <button type="submit" id="btn-vid" onclick="myFunction1()">Search</button>
    </form>
  </nav>

  <div class="hide-initially">
    <div id="player-container">
      <div id="player"></div>
    </div><br>
    <div class="slidecontainer">
      <input type="range" min="0" max="100" value="0" class="slider" id="myRange">
    </div>
    <br>
    <div id="btn-container">
      <button id="play">Play</button>
      <button id="pause">Pause</button>
      <button id="mute">Mute</button>
      <button id="sync">Sync</button>
    </div>
  </div>

  <script>
  $(document).ready(function(){
      $("#btn-vid").click(function(){
           $("#nav-bar").removeClass("center-initial-nav");
           $(".hide-initially").css("display", "block");

      });
  });
  </script>

<script>
    var tag = document.createElement('script');
    const socket = io('http://localhost:3000/');
    tag.src = "https://www.youtube.com/iframe_api";
    var firstScriptTag = document.getElementsByTagName('script')[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
    var player;
    function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
            height: '390',
            width: '640',
            playerVars:{
                'controls':0,
                'autoplay':0
            },
            videoId: 'M7lc1UVf-VE',
            events: {
                'onStateChange': onPlayerStateChange
            }
        });
    }
    document.getElementById('form').addEventListener('submit',function(e){
        e.preventDefault();
        socket.emit('newvideo',{
            video:document.getElementById('video').value,
            id:socket.io.engine.id
        })
    });
    socket.on('newvideo2',function(data){
        console.log('Changing')
        player.loadVideoById({videoId:data.video});
    });
    var done = false;
    function onPlayerStateChange(event) {
        if(event.data==3){

        }
        else if(event.data==1){
            timer=setInterval(update,500);
        }
        else if(event.data==2){
            clearInterval(timer);
        }
        if (event.data == YT.PlayerState.PLAYING && !done) {
            setTimeout(stopVideo, 6000);
            done = true;
        }
    }
    function update(){
        nt=player.getCurrentTime();
        tot=player.getDuration();
        if(nt/tot!=NaN){
            document.getElementById('myRange').value=nt/tot*100;
        }
        else{
            document.getElementById('myRange').value=0;
        }
    }
    document.getElementById('myRange').addEventListener('mousedown',function(){
        clearInterval(timer);
    });
    document.getElementById('myRange').addEventListener('mouseup',function(){
        socket.emit('time',{
            time:document.getElementById('myRange').value*player.getDuration()/100,
            id:socket.io.engine.id
        });
        timer=setInterval(update,500);
    });
    socket.on('time',function(data){
        console.log('TIME CHANGE')
        player.seekTo(data.time);
        player.pauseVideo();
    })
    document.getElementById('play').addEventListener('click',function(){
        socket.emit('change',{
            type:1,
            pos:player.getCurrentTime(),
            id:socket.io.engine.id
        })
    })
    document.getElementById('mute').addEventListener('click',function(){
        socket.emit('mute',{
            id:socket.io.engine.id
        })
    })
    socket.on('mute',function(data){
        if(player.isMuted()){
            player.unMute();
            document.getElementById('mute').style.backgroundColor="#333";
        } else{
            player.mute();
            document.getElementById('mute').style.backgroundColor="#991f00";
        }
    })
    document.getElementById('pause').addEventListener('click',function(){
        socket.emit('change',{
            type:2,
            pos:player.getCurrentTime(),
            id:socket.io.engine.id
        })
    })
    document.getElementById('sync').addEventListener('click',function(){
        socket.emit('get',{
            id:socket.io.engine.id
        })
    });
    socket.on('change',function(data){
        console.log(data);
        if(data.type===1){
            player.seekTo(data.pos);
            player.playVideo();
            document.getElementById('pause').style.backgroundColor="#333";
            document.getElementById('play').style.backgroundColor="#991f00";
        } else if(data.type==2){
            player.seekTo(data.pos);
            player.pauseVideo();
            document.getElementById('play').style.backgroundColor="#333";
            document.getElementById('pause').style.backgroundColor="#991f00";
        } else if(data.type===3){

        }
    })
    socket.on('errormessage',function(data){
        if(socket.id==data.id){
            alert('Youre not the host. Only host can change.')
        }
    })
    socket.on('get',function(data){
        socket.emit('sync',{
                pos:player.getCurrentTime(),
                state:player.getPlayerState(),
                id:socket.io.engine.id,
            });
    });
    socket.on('sync',function(data){
        console.log(data)
        player.seekTo(data.pos);
        if(data.state==1){
            player.playVideo();
        } else if(data.state==2){
            player.pauseVideo();
        }
    });
    function stopVideo() {
        player.stopVideo();
    }
</script>

</body>
</html>
